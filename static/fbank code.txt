import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow

df = pd.read_csv('Final_bank.csv')
df.head()

plt.figure(figsize=(12, 8)) 
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.show()

x = df.drop('Churn' , axis = 1)
y = df['Churn']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y, test_size = 0.2 , random_state = 42)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)  
x_test = scaler.transform(x_test)

x_train = np.expand_dims(x_train, axis=1)  # Now x_train.shape == (samples, timesteps=1, features)
x_test = np.expand_dims(x_test, axis=1)    # Similarly for x_test

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, LSTM, Dense

churn_model = Sequential()
churn_model.add(LSTM(64, activation='relu', input_shape=(x_train.shape[1], x_train.shape[2])))
churn_model.add(Dense(32, activation='relu'))  # Hidden layers
churn_model.add(Dense(16, activation='relu'))
churn_model.add(Dense(1, activation='sigmoid'))

churn_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) # compile the model

churn_model.fit(x_train, y_train, epochs=10, batch_size=32) # Train the model

loss, accuracy = churn_model.evaluate(x_test, y_test)
print('Accuracy:', accuracy)
print('Loss:', loss)

import pickle

with open('churn_model_pickle', 'wb') as f:
    pickle.dump(churn_model,f)
    